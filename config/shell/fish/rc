#% author: Aaron Peter Samuel
# shellcheck shell=fish
#% description: configure the shell environment
#% usage: chsh -s $(which zsh) , source ~/.zshrc
# - ignore shellcheck warnings about source statements
# shellcheck source=/dev/null
# - ignore shellcheck warnings about read/mapfile
# shellcheck disable=SC2207
# set -x



# initialize static sources
unset DOT_ROOT DOT_DIRECTORY DOT_LIBRARY DOT_LIBRARY_FILES DOT_DEBUG DOT_INTERACTIVE DOT_BOOT DOT_BOOTED
export DOT_DEBUG="${DOT_DEBUG:-0}"
export DOT_INTERACTIVE="${DOT_INTERACTIVE:-0}"
export DOT_ROOT="${DOT_ROOT:-${HOME}/.dot}"
export DOT_DIRECTORY="${DOT_DIRECTORY:-${DOT_ROOT}}"
export DOT_DEFAULT_SHELL="${DOT_DEFAULT_SHELL:-zsh}"
export DOT_LIBRARY="${DOT_LIBRARY:-${DOT_ROOT}/zlib}"
export DOT_LIBRARY_FILES=($(find "${DOT_LIBRARY}" -maxdepth 1 -type f -name "*.sh" | sort -d))
export DOT_BOOTSTRAP="${DOT_BOOTSTRAP:-${DOT_DIRECTORY}/bin/bootstrap.sh}"
export DOT_BOOTED="${DOT_BOOTED:-false}"

## TODO: is the bootstrap file available? has the system been bootstrapped?
if [[ -f "${DOT_BOOTSTRAP}" ]]; then
    (source "${DOT_BOOTSTRAP}" || . "${DOT_BOOTSTRAP}") || (
        echo "Error: unable to load bootstrapper"
        exit 1
    )
fi


# configure environment variable germaine to your dot environment
(source "${DOT_LIBRARY}"/static/dotenv.sh || . "${DOT_LIBRARY}"/static/dotenv.sh) || (
    echo "Error: unable to load dotenv"
    exit 1
)

# static sources
(source "${DOT_LIBRARY}"/static/limits.sh || . "${DOT_LIBRARY}"/static/limits.sh) || (
    echo "Error: unable to load shell limits"
    exit 1
)
(source "${DOT_LIBRARY}"/static/autoload.sh || . "${DOT_LIBRARY}"/static/autoload.sh) || (
    echo "Error: unable to configure autoloads"
    exit 1
)

export ZSH="$HOME/.oh-my-zsh"
declare -a SSH_KEYS

# prepare SSH keys for export
if [[ -d "$HOME"/.ssh ]]; then
    set files ("$HOME"/.ssh/*)
    # files=("$HOME"/.ssh/*)
    for file in "${files[@]}"; do
        echo "file: $file"
        if [[ "$file" =~ (config|deprecated|.*pub|environment.*|known_hosts.*) ]]; then
            continue
        fi
        set base $(basename "$file")
        SSH_KEYS+=("$base")
    done
fi

export SSH_KEYS

# TODO: this is not working as expected, we should not need to augment the alias jq, we can install both versions when needed
# we need JQ, so let's ensure it is configured early
# if [[ "$(arch)" == "arm64" ]]; then
#     alias jq=~/bin/jq-arm
# else
#     alias jq=~/bin/jq-intel
# fi


# make ICLOUD directory available to shell
set ICLOUD "${ICLOUD_DIR:-$HOME/Library/Mobile Documents/com~apple~CloudDocs}"
set ICLOUD_DOCUMENTS "${ICLOUD}/Documents"
set ICLOUD_DOWNLOADS "${ICLOUD}/Downloads"
set ICLOUD_SCREENSHOTS "${ICLOUD}/ScreenShots"
export ICLOUD ICLOUD_DOCUMENTS ICLOUD_DOWNLOADS ICLOUD_SCREENSHOTS

# set dot variables or use defaults
set DOT_SHELL ${DOT_SHELL:-zsh}
set DOT_DEBUG ${DOT_DEBUG:-false}
set DOT_SPLASH_SCREEN ${DOT_SPLASH_SCREEN:-true}
set DOT_SPLASH_TYPE "${DOT_SPLASH_TYPE:-quote}"
set DOT_DIR "${DOT_DIR:-$HOME/.dot}"
set DOT_LIBS_DIR "${DOT_LIBS_DIR:-$DOT_DIR/zlib}"
set DOT_CLOUD_DIR "${ICLOUD}/dot"
set DOT_SHELL_DATA ${DOT_SHELL_DATA:-$HOME/.dot/data/zsh.json}
set DOT_SECRETS_DATA ${DOT_SECRETS_DATA:-"${DOT_CLOUD_DIR}/secrets.json"}

# load shell data
set SHELL_INIT_DIR $( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd ) # where are we? https://stackoverflow.com/a/246128/1235074
set SHELL_INIT_START $(date +%s)

set TERM xterm-256color
set MANPATH "/usr/local/man:$MANPATH"
set HISTSIZE 1000000000
set HISTFILESIZE 1000000000
set SAVEHIST $HISTSIZE
set HISTFILE $HOME/.zsh_history
set MANPATH "/usr/local/man:$MANPATH"
set GPG_TTY $(tty)
export GPG_TTY
set LANG en_US.UTF-8
set EDITOR vim
set ZSH_COLORIZE_TOOL pygmentize
set PAGER 'bat '
set MANPAGER "sh -c 'col -bx | bat -l man -p'"
set TMUX_PLUGIN_MANAGER_PATH "$HOME/.tmux/plugins"
set arch "$(arch)"
set ARCH "${arch}"

# enable zsh options
set ZSH_OPTIONS (
    $(
        jq -r '.options[]' "$HOME"/.dot/data/zsh.json | xargs
    )
)
export ZSH_OPTIONS
for opt in "${ZSH_OPTIONS[@]}"; do
    if [[ ! "${DOT_DEBUG}x" == "x" && "${DOT_DEBUG}" == true ]]; then
        echo "set option: $opt"
    fi
    setopt "${opt}"
done

# make ZLIB available to shell
if [[ -d "$DOT_LIBS_DIR" ]]; then
    # sort the files in lexicographical order
    for lib in $(find "${DOT_LIBS_DIR}" -type f -name "*.sh" | sort -d); do
    #for lib in "${DOT_LIBS_DIR}"/*; do
        # skip if not a file
        # if [[ ! -f "${DOT_LIBS_DIR}/${lib}" ]]; then
        #     continue
        # fi

        # skip README files
        if [[ "$lib" =~ .*README.md ]]; then
            continue
        fi
        if [[ ! "${DOT_DEBUG}x" == "x" && "${DOT_DEBUG}" == true ]]; then
            echo "load source: $lib"
        fi
        source "$lib" || true
    done
else
    echo "Warning: DOT_LIBS_DIR not found: $DOT_LIBS_DIR"
fi

compileTermInfo

if [[ "${DOT_DEBUG}" -gt 0 ]]; then
    echo "configuring: $OPERATING_SYSTEM/$CPU_ARCHITECTURE"
fi

# configure zstyle
# NOTE: ðŸ’¡ the zstyle section should precede sourcing of oh-my-zsh
# shellcheck disable=SC2154
# shellcheck disable=SC2309
if [[ $(getShellName)  =~ .*zsh ]]; then
    zstyle :omz:plugins:iterm2 shell-integration yes # enable zsh integration
    zstyle ':omz:update' frequency 7
    zstyle ':completion::complete:*' use-cache 1
    zstyle ":conda_zsh_completion:*" use-groups true
    zstyle ":conda_zsh_completion:*" show-unnamed true
    zstyle ":conda_zsh_completion:*" sort-envs-by-time true
    zstyle :omz:plugins:ssh-agent identities "${SSH_KEYS[@]}"
    zstyle :omz:plugins:ssh-agent agent-forwarding on
    zstyle :omz:plugins:ssh-agent lifetime

fi

# TODO: host secrets in icloud directory (optionally)
if [[ -d "$ICLOUD"/dot && -f "$ICLOUD"/dot/secrets.json ]]; then
    # uses an associative array to load secrets into memory
    # declare -A secrets
    set secretKeys (
        $(
            jq -r '. | keys | .[]' "$ICLOUD"/dot/secrets.json | xargs
        )
    )
    export DOT_SECRET_KEYS=("${secretKeys[@]}")

    # if secrets length is greater than 0, write to /tmp/.secrets
    if [[ ${#secretKeys[@]} -gt 0  ]]; then
        # echo $TMPDIR
        touch "${TMPDIR}"/.secrets
        echo "#!/bin/bash" > "$TMPDIR"/.secrets
    fi

    for secretKey in "${secretKeys[@]}"; do
        secrets[$secretKey]="$(jq --arg secretKey "${secretKey}" -r '.[$secretKey]' "$ICLOUD"/dot/secrets.json)"
        echo "${secretKey}=${secrets[$secretKey]}" >> "$TMPDIR"/.secrets
    done

    if [[ -f "$TMPDIR"/.secrets ]]; then
        source "$TMPDIR"/.secrets
        rm -f "$TMPDIR"/.secrets
    fi
fi

# if [[ ${DOT_SPLASH_SCREEN} == true && "${DOT_SPLASH_TYPE}" == "quote" ]]; then
#     termQuote
# else
#     termLogo
# fi
# if [[ ${DOT_SPLASH_SCREEN} == true && "${DOT_SPLASH_TYPE}" == "ascii" ]]; then
#     termLogo
# else
#     termQuote
# fi


# TODO: move path setup to alibrary file, use JSON to define additional paths
#export PATH=${HOME}/devops/scripts:$PATH:/Users/aaronsamuel/Library/Python/3.11/bin
export PATH=${HOME}/devops/scripts:$PATH

# export PATH="$HOME/.jenv/bin:$PATH"
# eval "$(jenv init -)"
export PATH="/usr/local/opt/openjdk/bin:$PATH"
export VI_MODE_RESET_PROMPT_ON_MODE_CHANGE=true
export VI_MODE_SET_CURSOR=true

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi
export POWERLEVEL9K_INSTANT_PROMPT=quiet
export POWERLEVEL9K_INSTANT_PROMPT=off
typeset -g POWERLEVEL9K_INSTANT_PROMPT=off
typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
#export PATH=/opt/homebrew/bin:$PATH



# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
set ZSH_THEME "$(jq -r '.theme' "$HOME"/.dot/data/zsh.json)"
export ZSH_THEME

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
export DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
#ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
export COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
export HIST_STAMPS="dd.mm.yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
export plugins=(
    $(
        jq -r '.plugins.builtin[]' "$HOME"/.dot/data/zsh.json | xargs
    )
)

export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#E0F40A,bg=black,bold,underline"

source "$ZSH"/oh-my-zsh.sh

# bind keys
bindkey -M vicmd v edit-command-line
bindkey '\e[H' beginning-of-line
bindkey '\e[F' end-of-line

# You may need to manually set your language environment
# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


# completions defined in $HOME/.completion
#source "$HOME"/.completion/npm

export ITERM2_SQUELCH_MARK=1
# The next line updates PATH for the Google Cloud SDK.
#source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
# The next line enables shell command completion for gcloud.
#source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"



tmux-window-name() {
    ("$TMUX_PLUGIN_MANAGER_PATH"/tmux-window-name/scripts/rename_session_windows.py &)
}

add-zsh-hook chpwd tmux-window-name

# zle
zle -N create_completion


complete -o nospace -C /usr/local/bin/terraform terraform



# post exports
set SHELL_INIT_END $(date +%s)
set SHELL_INIT_TIME "$((SHELL_INIT_END - SHELL_INIT_START)) seconds"
export SHELL_INIT_DIR SHELL_INIT_START SHELL_INIT_END SHELL_INIT_TIME DOT_LIBS_DIR DOT_DIR DOT_DEBUG DOT_SPLASH_SCREEN DOT_SPLASH_TYPE DOT_CLOUD_DIR DOT_SHELL_DATA DOT_SECRETS_DATA
export PATH=$PATH:$HOME/.dot/bin

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
